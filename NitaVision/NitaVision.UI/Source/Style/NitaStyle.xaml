<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:convert="clr-namespace:NitaVision.UI.Source.Convert"
    xmlns:coreUI="clr-namespace:NitaVision.UI.Source.CoreUI"
    xmlns:style="clr-namespace:NitaVision.UI.Source.Style"
    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <convert:BrushToBoolConverter x:Key="BrushToBoolConverter" />
    <convert:SizeTypeConverter x:Key="SizeTypeConverter" />
    <convert:MultiplyConverter x:Key="MultiplyConverter" />
    <convert:ButtonModeConverter x:Key="ButtonModeConverter" />
    <convert:CenterXConverter x:Key="CenterXConverter" />
    <convert:ToolTipConverter x:Key="ToolTipConverter" />
    <convert:TextToVisibilityConverter x:Key="TextToVisibilityConverter" />
    <!--  小按钮默认高度  -->
    <sys:Double x:Key="SmallImage">12</sys:Double>
    <!--  中等按钮默认高度  -->
    <sys:Double x:Key="MediumImage">20</sys:Double>
    <!--  大按钮默认高度  -->
    <sys:Double x:Key="LargeImage">28</sys:Double>
    <!--  小按钮默认高度  -->
    <sys:Double x:Key="SmallText">12</sys:Double>
    <!--  中等按钮默认高度  -->
    <sys:Double x:Key="MediumText">14</sys:Double>
    <!--  大按钮默认高度  -->
    <sys:Double x:Key="LargeText">16</sys:Double>
    <!--  禁用后的透明度  -->
    <sys:Double x:Key="DisableOpacity">0.2</sys:Double>
    <!--  底边阴影颜色渐变  -->
    <LinearGradientBrush x:Key="BottomShadowBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#adadad" />
        <GradientStop Offset="1" Color="#fefefe" />
    </LinearGradientBrush>
    <!--  侧边阴影颜色渐变  -->
    <LinearGradientBrush x:Key="SideShadowBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientStop Offset="0" Color="#d6d6d6" />
        <GradientStop Offset="1" Color="#fefefe" />
    </LinearGradientBrush>
    <!--  默认背景颜色  -->
    <SolidColorBrush x:Key="DefaultBackgroundColor" Color="#f4f4f5" />
    <!--  默认边框颜色  -->
    <SolidColorBrush x:Key="DefaultBorderBrush" Color="#d4d4d8" />
    <SolidColorBrush x:Key="DisableForegroundText" Color="#9a9a9a" />
    <!--  默认前置颜色  -->
    <SolidColorBrush x:Key="DefaultForeground" Color="#434344" />
    <Thickness
        x:Key="DefaultBorder"
        Bottom="2"
        Left="2"
        Right="2"
        Top="2" />
    <CornerRadius
        x:Key="DefaultCornerRadius"
        BottomLeft="7"
        BottomRight="7"
        TopLeft="7"
        TopRight="7" />
    <!--  应用于UserControl的放大效果  -->
    <Style x:Key="MouseOverScaleStyle" TargetType="{x:Type UserControl}">
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform CenterX="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Converter={StaticResource CenterXConverter}}" CenterY="{Binding ActualHeight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}}, Converter={StaticResource CenterXConverter}}" ScaleX="1" ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <!--  鼠标悬浮时，将ScaleX和ScaleY的值变为1.1  -->
                        <DoubleAnimation
                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                            To="1.05"
                            Duration="0:0:0.2" />
                        <DoubleAnimation
                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                            To="1.05"
                            Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <!--  鼠标离开时，将ScaleX和ScaleY的值变回1  -->
                        <DoubleAnimation
                            Storyboard.TargetProperty="RenderTransform.ScaleX"
                            To="1"
                            Duration="0:0:0.2" />
                        <DoubleAnimation
                            Storyboard.TargetProperty="RenderTransform.ScaleY"
                            To="1"
                            Duration="0:0:0.2" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <!--  NitaToolTip  -->
    <Style x:Key="NitaToolTipStyle" TargetType="{x:Type ToolTip}">
        <Setter Property="Placement" Value="Bottom" />
        <Setter Property="ToolTipService.InitialShowDelay" Value="200" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border
                        Width="Auto"
                        Height="38"
                        Background="White"
                        BorderBrush="{StaticResource DefaultBorderBrush}"
                        BorderThickness="1"
                        CornerRadius="6">
                        <TextBlock
                            Padding="5"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Foreground="{StaticResource DefaultForeground}"
                            Text="{TemplateBinding Content}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  NitaButton  -->
    <Style
        x:Key="NitaButtonStyle"
        BasedOn="{StaticResource MouseOverScaleStyle}"
        TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="IsEnabled" Value="{Binding IsEnable, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type style:NitaButton}">
                    <ContentPresenter x:Name="contentPresenter" ContentSource="Content">
                        <ContentPresenter.ToolTip>
                            <ToolTip Content="{TemplateBinding ToolTipText}" Style="{StaticResource NitaToolTipStyle}" />
                        </ContentPresenter.ToolTip>
                    </ContentPresenter>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnable" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{StaticResource DisableForegroundText}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="NitaButtonImage" TargetType="Image">
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Width" Value="{Binding Path=SizeType, Converter={StaticResource SizeTypeConverter}, RelativeSource={RelativeSource AncestorType=style:NitaButton}, ConverterParameter=Image, Mode=TwoWay}" />
        <Setter Property="Height" Value="{Binding Path=SizeType, Converter={StaticResource SizeTypeConverter}, RelativeSource={RelativeSource AncestorType=style:NitaButton}, ConverterParameter=Image, Mode=TwoWay}" />
        <Setter Property="Visibility" Value="{Binding Mode, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Converter={StaticResource ButtonModeConverter}, ConverterParameter=Icon}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsEnable, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" />
            </DataTrigger>
        </Style.Triggers>

    </Style>
    <Style x:Key="NitaButtonLabel" TargetType="Label">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{Binding SizeType, Converter={StaticResource SizeTypeConverter}, RelativeSource={RelativeSource AncestorType=style:NitaButton}, ConverterParameter=Text, Mode=TwoWay}" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="{Binding ElementName=PART_Icon, Path=Height, Converter={StaticResource MultiplyConverter}, ConverterParameter=2, Mode=TwoWay}" />
        <Setter Property="Content" Value="{Binding Text, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" />
        <!--<Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" />-->
        <Setter Property="Visibility" Value="{Binding Mode, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Converter={StaticResource ButtonModeConverter}, ConverterParameter=Text}" />
    </Style>
    <Style x:Key="DefaultBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderBrush" Value="{StaticResource DefaultBorderBrush}" />
        <Setter Property="BorderThickness" Value="{StaticResource DefaultBorder}" />
        <Setter Property="CornerRadius" Value="{StaticResource DefaultCornerRadius}" />
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=NitaBackground, Converter={StaticResource BrushToBoolConverter}, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" Value="False">
                <Setter Property="Background" Value="{StaticResource DefaultBackgroundColor}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=NitaBackground, Converter={StaticResource BrushToBoolConverter}, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" Value="True">
                <Setter Property="Background" Value="{Binding Path=NitaBackground, RelativeSource={RelativeSource AncestorType=style:NitaButton}, Mode=TwoWay}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--  淡入淡出效果的 Image Style  -->
    <Style x:Key="FadeImageStyle" TargetType="{x:Type coreUI:NitaImage}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" />
            </Trigger>
            <EventTrigger RoutedEvent="SourceChanged">
                <BeginStoryboard>
                    <Storyboard>
                        <DoubleAnimation
                            Storyboard.TargetProperty="Opacity"
                            From="0"
                            To="1"
                            Duration="0:0:0.3" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <!--  NitaCheckBox  -->
    <Style
        x:Key="NitaCheckBoxStyle"
        BasedOn="{StaticResource MouseOverScaleStyle}"
        TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type coreUI:NitaCheckBox}">
                    <ContentPresenter x:Name="contentPresenter" ContentSource="Content">
                        <ContentPresenter.ToolTip>
                            <ToolTip Content="{TemplateBinding ToolTipText}" Style="{StaticResource NitaToolTipStyle}" />
                        </ContentPresenter.ToolTip>
                    </ContentPresenter>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False" />
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>