<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:study="clr-namespace:NitaVision.UI.UI.StudyList"
    xmlns:style="clr-namespace:NitaVision.UI.Source.Style"
    xmlns:sys="clr-namespace:System;assembly=netstandard">
    <DropShadowEffect
        x:Key="UnhoverThumbEffect"
        BlurRadius="5"
        Opacity="0.3"
        ShadowDepth="0"
        Color="#FFFFDC5D" />
    <DropShadowEffect
        x:Key="HoverThumbEffect"
        BlurRadius="5"
        Opacity="0.5"
        ShadowDepth="0"
        Color="#FFFFDC5D" />
    <DropShadowEffect
        x:Key="DragThumbEffect"
        BlurRadius="8"
        Opacity="1"
        ShadowDepth="0"
        Color="#FFFFDC5D" />
    <Style x:Key="DefaultSliderThumbStyle" TargetType="Thumb">
        <Setter Property="Width" Value="15" />
        <Setter Property="Height" Value="15" />
        <Setter Property="Background" Value="White" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Ellipse
                        Width="{TemplateBinding Width}"
                        Height="{TemplateBinding Height}"
                        Effect="{StaticResource UnhoverThumbEffect}"
                        Fill="{TemplateBinding Background}" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" Value="{StaticResource HoverThumbEffect}" />
                            <Setter Property="Cursor" Value="Hand" />
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Effect" Value="{StaticResource DragThumbEffect}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DefaultLeftRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Height="20" Background="#FFFFDC5D" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DefaultRightRepeatButtonStyle" TargetType="RepeatButton">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BaseSliderStyle" TargetType="Slider">
        <Setter Property="Width" Value="Auto" />
        <Setter Property="MinHeight" Value="15" />
        <Setter Property="Margin" Value="20" />
        <Setter Property="Maximum" Value="100" />
        <Setter Property="IsSnapToTickEnabled" Value="True" />
        <!--  移到鼠标点击的指定刻度点  -->
        <Setter Property="IsMoveToPointEnabled" Value="True" />
        <!--
            移动的最大最小距离。
            由于设置了IsMoveToPointEnabled=True，下面两个属性就没发挥作用了。
            点击RepeatButton时直接就移动到了指定位置。
            如果为False，那么由于RepeatButton绑定了Slider.DecreaseLarge命令，
            那点击左右的RepeatButton一次，就移动10个单位距离。
            同样的还有Slider.DecreaseSmall命令，移动1个单位距离
        -->
        <Setter Property="LargeChange" Value="10" />
        <Setter Property="SmallChange" Value="1" />
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="Foreground" Value="#FFFFDC5D" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
    <Style
        x:Key="BeautifySliderStyle"
        BasedOn="{StaticResource BaseSliderStyle}"
        TargetType="Slider">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="16" MinHeight="{TemplateBinding MinHeight}" />
                        </Grid.RowDefinitions>
                        <Track Name="PART_Track" Grid.Row="0">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="Slider.DecreaseLarge" Style="{StaticResource DefaultLeftRepeatButtonStyle}" />
                            </Track.DecreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource DefaultSliderThumbStyle}" />
                            </Track.Thumb>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="Slider.IncreaseLarge" Style="{StaticResource DefaultRightRepeatButtonStyle}" />
                            </Track.IncreaseRepeatButton>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="IconToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <StackPanel Orientation="Horizontal">
                            <Image
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                Margin="5"
                                Source="{TemplateBinding Tag}" />
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FFBEE6FD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FFC9DAF8" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  定义一个IconButton样式初版  -->
    <Style x:Key="IconButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="LightGray" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="ToolTip" Value="新建文件夹" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Image
                            Width="16"
                            Height="16"
                            Margin="5"
                            Source="{TemplateBinding Tag}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#FFDDDDDD" />
                            <Setter Property="BorderBrush" Value="#FFAAAAAA" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="#FFCCCCCC" />
                            <Setter Property="BorderBrush" Value="#FF888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  定义一个样式，用来设置音乐播放按钮的外观和行为  -->
    <Style x:Key="PlayButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <!--  使用一个Grid布局，将图标和文字放在一起  -->
                        <Grid>
                            <!--  使用一个Image控件，显示图标  -->
                            <Image
                                x:Name="PART_Icon"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Source="{StaticResource Voice}" />
                            <!--  使用一个TextBlock控件，显示文字  -->
                            <TextBlock
                                x:Name="PART_Text"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Text="{TemplateBinding Content}" />
                        </Grid>
                    </Border>
                    <!--  使用一个Trigger对象，根据按钮的IsEnabled属性，控制图标和文字的颜色  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Icon" Property="Opacity" Value="0.5" />
                            <Setter TargetName="PART_Text" Property="Foreground" Value="#FFAAAAAA" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--  设置按钮的默认宽度和高度  -->
        <Setter Property="Width" Value="36" />
        <Setter Property="Height" Value="36" />
        <!--  设置按钮的默认背景颜色和边框颜色  -->
        <Setter Property="Background" Value="#FFDDDDDD" />
        <Setter Property="BorderBrush" Value="#FFAAAAAA" />
        <!--  设置按钮的默认鼠标悬浮提示  -->
        <Setter Property="ToolTip" Value="{Binding Content}" />
    </Style>
    <!--  定义一个IconButton样式二版，用来设置音乐播放按钮的外观和行为  -->
    <Style x:Key="NitaIconButton" TargetType="{x:Type style:IconButton}">
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
        <Setter Property="ToolTip" Value="{Binding Content, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type style:IconButton}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid>
                            <Image
                                x:Name="PART_Icon"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Source="{TemplateBinding Icon}" />
                            <TextBlock
                                x:Name="PART_Text"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Text="{TemplateBinding Content}" />
                        </Grid>
                    </Border>
                    <!--  当鼠标悬浮在按钮上时，改变图标的颜色和透明度  -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FFC9DAF8" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="#FFBEE6FD" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Background" Value="#FF888888" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="#C0C0C0" />
        <Setter Property="Width" Value="3" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#F0E68C" />
                <Setter Property="Width" Value="7" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HorizontalGridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="#C0C0C0" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Height" Value="3" />
        <Setter Property="Cursor" Value="SizeNS" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#F0E68C" />
                <Setter Property="Height" Value="7" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="NitaToolTipStyle" TargetType="ToolTip">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HasDropShadow" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border Background="#FAF0E6" CornerRadius="5">
                        <ContentPresenter Margin="5" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  定义一个灰色的渐变画刷  -->
    <LinearGradientBrush x:Key="GrayBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFBFBFBF" />
        <GradientStop Offset="1" Color="#FF7F7F7F" />
    </LinearGradientBrush>
</ResourceDictionary>
